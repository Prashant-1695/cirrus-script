#!/bin/bash
cd /tmp/rom # Depends on where source got synced
mv /tmp/ci/extras.sh /tmp/rom
. /tmp/ci/function && check_build_type

# Normal build steps
. build/envsetup.sh
lunch $lunch_device
source extras.sh

# check how much time sync took
sync_time

# fix for fork user, so they dont have to update their repo for this
if [ ! $(cat /tmp/ci/build.sh | grep -o -e 'extras.sh') ]; then
	sed -i '/lunch/ a . extras.sh' /tmp/ci/build.sh
fi

# compile plox
case "$build_type" in
		 V|v) # Lets Make Vendor / System
		 SECONDS=0
		 make vendorimage -j$(nproc --all)
		 vendor_time=$(($SECONDS / 60))
		 sleeps=$((113 - ($vendor_time + $sync_time)))m
		 make systemimage -j$(nproc --all) | tee build.log &
		 sleep $sleeps
		 kill %1
		 ;;
		 S|s) # Lets Make System
		 sleeps=$((113 - $sync_time))m
		 make systemimage -j$(nproc --all) | tee build.log &
		 sleep $sleeps
		 kill %1
		 ;;
		 R|r) # Lets Make Full Rom
		 bash /tmp/ci/build.sh; ls out/target/product/$device_codename/*2022*.zip || sed -i 's/-j$(nproc --all)/-j7/' /tmp/ci/build.sh && bash /tmp/ci/build.sh
		 if [ ! -e out/target/product/*/*2022*.zip ]; then # to bypass OOM kill
		 sed -i 's/-j$(nproc --all)/-j6/' /tmp/ci/build.sh && bash /tmp/ci/build.sh # simply re-run the build with less threads
		 fi
esac

if [ -e out/target/product/$device_codename/system.img ]; then
echo "R" > /tmp/build_type.txt
else
echo "S" > /tmp/build_type.txt
fi

cd out/target/product/$device_codename/
ls *2022*zip && upload *2022*zip

if [ ! -e /tmp/rom/out/target/product/*/*2022*.zip ]; then

# don't send this again if bg loop already done this when it was stuck in sleep
if [ ! -e /tmp/abort.txt ]; then
tg "Stop Compiling $build_type To Collect Cache
Status: $progress"
fi

fi

ccache -s # Let's print ccache statistics finally
